{"version":3,"sources":["lib/markup/photodiode.js","lib/utils.js","config/trigger.js","config/main.js","trials/camera.js","assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/blue_payout_correct_10.png","assets/images/blue_payout_correct_100.png","components/Login.js","firebase.js","trials/experimentStart.js","trials/startCode.js","trials/instructions.js","trials/holdUpMarker.js","trials/adjustVolume.js","trials/blockNumber.js","timelines/preamble.js","trials/experimentEnd.js","trials/fixation.js","lib/markup/fixation.js","lib/markup/trial.js","trials/interference.js","trials/accuracy.js","timelines/taskBlock.js","timelines/main.js","lib/rt-categorize-html.js","components/JsPsychExperiment.js","App.jsx","index.js","lib/markup/stimuli.js"],"names":["ipcRenderer","config","USE_ELECTRON","electron","window","require","photodiodeGhostBox","class_","USE_PHOTODIODE","pdSpotEncode","taskCode","numBlinks","eventCodes","open_task","repeat_pulse_for","ms","i","callback","$","css","setTimeout","pulse_for","send","r","sleep","Promise","resolve","removeCursor","elementId","document","getElementById","classList","add","getQueryVariable","variable","vars","location","search","substring","split","length","pair","decodeURIComponent","getProlificId","getTurkUniqueId","keys","map","turkInfo","jsPsych","turk","workerId","assignmentId","getBlockNumber","data","blockNumber","JSON","parse","responses","addProperties","num_blocks","console","log","beep","audioCodes","context","AudioContext","o","createOscillator","g","createGain","type","connect","frequency","setValueAtTime","currentTime","destination","start","stop","module","exports","left","middle","right","fixation","non_fixation","USE_MTURK","outsideTurk","USE_PROLIFIC","USE_FIREBASE","process","REACT_APP_FIREBASE","USE_VOLUME","REACT_APP_VOLUME","USE_CAMERA","REACT_APP_VIDEO","USE_EEG","REACT_APP_USE_EEG","REACT_APP_USE_PHOTODIODE","lang","mlang","_","merge","taskName","camera","title","markup","instructions","stimulus","baseStimulus","choices","prompt","continue","button","response_ends_trial","on_load","participantId","get","values","participant_id","handleEvents","stream","recorder","srcObject","recordedChunks","MediaRecorder","mimeType","addEventListener","e","size","push","blob","media","reader","FileReader","fileName","Date","now","onload","readyState","buffer","Buffer","result","stringify","readAsArrayBuffer","saveBlob","Blob","navigator","mediaDevices","getUserMedia","video","then","desktopCapturer","getSources","types","sources","a","source","name","mandatory","chromeMediaSource","chromeMediaSourceId","id","catch","error","on_finish","cameraCapture","screenCapture","webpackContext","req","webpackContextResolve","__webpack_require__","Error","code","Object","Login","onLogin","envParticipantId","envStudyId","validationFunction","useState","setParticipant","studyId","setStudy","setError","useEffect","className","role","Form","onSubmit","preventDefault","loggedIn","Group","controlId","Label","Control","autoFocus","value","onChange","target","Button","style","width","block","disabled","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","databaseURL","REACT_APP_databaseURL","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","db","firebase","initializeApp","firestore","hostname","useEmulator","experimentStart","task","startCode","setting_up","trial_duration","screenOne","welcome","p1","p2","screenTwo","p3","p4","screenThree","p5","t100","press_one","screenFour","if_see","t020","press_two","screenFive","t003","press_three","screenSix","t212","screenSeven","t112","screenEight","t322","screenNine","t221","screenTen","t211","screenEleven","t232","screenTwelve","p6","p7","p8","screenThirteen","p9","p10","p11","screenFourteen","p12","p13","p14","p15","screenFifteen","practice_trials","tl","splice","pages","show_clickable_nav","holdUpMarker","focus","adjustVolume","adjust_volume","press","numBlocks","questions","block_number","set","preamble","timeline","experimentEnd","duration","end","trial","NO_KEYS","Duration","interferenceTrial","too_slow","interference","Stimuli","key_answer","Correct","show_stim_with_feedback","feedback_duration","timeout_message","key_press","correct","accuracy","training","num_trials","num_complete","percent_correct","j_data","last","endCurrentTimeline","on_start","num_correct","reduce","accumulator","item","Math","floor","toString","training_failed","training_success","of","next_block","taskBlock","trainingBlock","mainBlock","flatMap","Trial","loop_function","primaryTimeline","mturkTimeline","rt_categorize_html","plugin","info","description","parameters","plugins","parameterType","HTML_STRING","pretty_name","default","undefined","KEYCODE","ALL_KEYS","array","text_answer","STRING","correct_text","incorrect_text","force_correct_button_press","BOOL","no_function","show_feedback_on_timeout","stimulus_duration","INT","display_element","innerHTML","pluginAPI","querySelector","visibility","trial_data","after_response","clearAllTimeouts","cancelAllKeyboardResponses","key","rt","timeout","atext","replace","getKeyboardResponse","callback_function","endTrial","valid_responses","rt_method","persist","allow_held_key","doFeedback","finishTrial","JsPsychExperiment","dataUpdateFunction","dataFinishFunction","settings","on_data_update","App","startDate","toISOString","setLogin","setRenderer","psiturk","setPsiturk","setEnvParticipantId","setEnvStudyId","currentMethod","setMethod","reject","setReject","query","URLSearchParams","defaultValidation","defaultFunction","setLoggedIn","useCallback","study_id","start_date","task_version","version","credentials","sendSync","lodash","noConflict","turkId","PsiTurk","pID","desktop","collection","doc","update","FieldValue","arrayUnion","addToFirebase","mturk","recordTrialData","saveData","completeHIT","completePsiturk","start_time","app_version","appVersion","app_platform","platform","results","initParticipant","ReactDOM","render","element"],"mappings":"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","file":"static/js/main.e29aad2a.chunk.js","sourcesContent":["import { config } from \"../../config/main\";\nimport { eventCodes } from \"../../config/trigger\";\nimport $ from \"jquery\";\n\n// conditionally load electron and psiturk based on MTURK config variable\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require(\"electron\");\n  ipcRenderer = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n  const class_ = config.USE_PHOTODIODE ? \"visible\" : \"invisible\";\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`;\n  return markup;\n};\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n    $(\".photodiode-spot\").css({ \"background-color\": \"white\" });\n    setTimeout(() => {\n      $(\".photodiode-spot\").css({ \"background-color\": \"black\" });\n      callback();\n    }, ms);\n  }\n\n  function repeat_pulse_for(ms, i) {\n    if (i > 0) {\n      pulse_for(ms, () => {\n        setTimeout(() => {\n          repeat_pulse_for(ms, i - 1);\n        }, ms);\n      });\n    }\n  }\n\n  if (config.USE_PHOTODIODE) {\n    const blinkTime = 40;\n    let numBlinks = taskCode;\n    if (taskCode < eventCodes.open_task) numBlinks = 1;\n    repeat_pulse_for(blinkTime, numBlinks);\n    if (ipcRenderer) {\n      ipcRenderer.send(\"trigger\", taskCode);\n      setTimeout(function () {\n        ipcRenderer.send(\"trigger\", 0);\n      }, 5);\n    }\n  }\n};\n\nexport { photodiodeGhostBox, pdSpotEncode };\n","import { jsPsych } from 'jspsych-react'\nimport requireContext from 'require-context.macro'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst removeCursor = (elementId) => {\n  let element = document.getElementById(elementId);\n  element.classList.add(\"nocursor\");\n}\n\nconst addCursor = (elementId) => {\n  let element = document.getElementById(elementId);\n  element.classList.remove(\"nocursor\");\n}\n\nconst getQueryVariable = (variable) => {\n  let query = window.location.search.substring(1);\n  let vars = query.split(\"&\");\n  for (let i = 0; i < vars.length; i++) {\n    let pair = vars[i].split(\"=\");\n    if (decodeURIComponent(pair[0]) === variable) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n};\n\nconst verifyProlific = () => {\n  return getQueryVariable(\"PROLIFIC_ID\") !== undefined;\n};\n\nconst getProlificId = () => {\n  const prolificId = getQueryVariable(\"PROLIFIC_PID\");\n  return prolificId\n};\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\n// import images\nconst importAll = (r) => {\n  return r.keys().map(r);\n}\n\nconst images = importAll(requireContext('../assets/images', false, /\\.(png|jpe?g|svg)$/));\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getBlockNumber = (data) => {\n  const blockNumber = JSON.parse(data.responses)['Q0']\n  jsPsych.data.addProperties({num_blocks: blockNumber})\n  console.log(\"NumBlocks\", blockNumber)\n}\n\nconst beep = (audioCodes) => {\n  const context = new AudioContext()\n  const o = context.createOscillator()\n  const g = context.createGain()\n  o.type = audioCodes.type\n  o.connect(g)\n  o.frequency.setValueAtTime(audioCodes.frequency, 0)\n  console.log(context.currentTime)\n  g.connect(context.destination)\n  o.start()\n  o.stop(context.currentTime + 0.4)\n}\n\n\nexport {\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  images,\n  verifyProlific,\n  getProlificId,\n  startKeypressListener,\n  getTurkUniqueId,\n  sleep,\n  removeCursor,\n  addCursor,\n  beep,\n  getBlockNumber\n}\n","// Event trigger settings - used in both the react app (renderer) and the electron app (main)\nconst eventCodes = {\n\tleft: 1,\n\tmiddle: 2,\n\tright: 3,\n\tfixation: 5,\n\tnon_fixation: 6,\n\topen_task: 11\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from \"jspsych-react\";\nimport _ from \"lodash\";\nimport { eventCodes } from \"./trigger\";\nimport { getProlificId } from \"../lib/utils\";\n\nrequire(\"dotenv\").config();\n\n// mapping of letters to key codes\nconst keys = {\n  A: 65,\n  B: 66,\n  C: 67,\n  F: 70,\n  J: 74,\n  space: 32,\n};\n\n// audio codes\nconst audioCodes = {\n  frequency: 100 * (eventCodes.open_task - 9),\n  type: \"sine\",\n};\n\n// is this mechanical turk?\nlet USE_MTURK = !jsPsych.turk.turkInfo().outsideTurk;\nlet USE_PROLIFIC = getProlificId() && !USE_MTURK;\nlet USE_ELECTRON = true;\nlet USE_FIREBASE = process.env.REACT_APP_FIREBASE === \"true\";\n\ntry {\n  window.require(\"electron\");\n} catch {\n  USE_ELECTRON = false;\n}\n// whether or not to ask the participant to adjust the volume\nconst USE_VOLUME = process.env.REACT_APP_VOLUME === \"true\";\n// these variables depend on USE_ELECTRON\n// whether or not to enable video\nconst USE_CAMERA = process.env.REACT_APP_VIDEO === \"true\" && USE_ELECTRON;\n// whether or not the EEG/event marker is available\nconst USE_EEG =\n  process.env.REACT_APP_USE_EEG === \"true\" && USE_ELECTRON;\n// whether or not the photodiode is in use\nconst USE_PHOTODIODE =\n  process.env.REACT_APP_USE_PHOTODIODE === \"true\" && USE_ELECTRON;\n\n// get language file\nconst lang = require(\"../language/en_us.json\");\n// TODO: what should this depend on?\nif (!USE_ELECTRON) {\n  // if this is mturk, merge in the mturk specific language\n  const mlang = require(\"../language/en_us.mturk.json\");\n  _.merge(lang, mlang);\n}\n\nconst taskName = \"MSIT\";\n\n// setting config for trials\nconst config = {\n  USE_PHOTODIODE,\n  USE_EEG,\n  USE_ELECTRON,\n  USE_MTURK,\n  USE_VOLUME,\n  USE_CAMERA,\n  USE_PROLIFIC,\n  USE_FIREBASE\n};\n\nexport {\n  keys,\n  lang,\n  eventCodes,\n  config,\n  audioCodes,\n  taskName,\n};\n","import { lang, taskName, config} from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\n\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\nfunction saveBlob(blob, media, participantId) {\n  let reader = new FileReader()\n  let fileName =`pid_${participantId}_${media}_${Date.now()}.webm`\n  reader.onload = function() {\n      if (reader.readyState === 2) {\n          var buffer = new Buffer(reader.result)\n          ipcRenderer.send('save_video', fileName, buffer)\n          console.log(`Saving ${JSON.stringify({ fileName, size: blob.size })}`)\n      }\n  }\n  reader.readAsArrayBuffer(blob)\n}\n\nconst camera = () => {\n  document.title = taskName\n  let markup = `\n  <div class=\"d-flex flex-column align-items-center\">\n  <p>${lang.instructions.camera}</p>\n  <video id=\"camera\" width=\"640\" height=\"480\" autoplay></video>\n  </div>\n  `\n  let stimulus = baseStimulus(markup, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [ lang.prompt.continue.button],\n    response_ends_trial: true,\n    on_load: () => {\n      // Grab elements, create settings, etc.\n      // Elements for taking the snapshot\n      const participantId = jsPsych.data.get().values()[0].participant_id\n\n      let camera = document.getElementById('camera');\n\n\n      const handleEvents = function(stream, recorder) {\n        console.log(stream)\n        if (recorder === \"cameraCapture\") {\n          camera.srcObject = stream;\n        }\n      \n        \n        const options = {mimeType: 'video/webm'};\n        const recordedChunks = [];\n        window[recorder] = new MediaRecorder(stream, options);\n    \n        window[recorder].addEventListener('dataavailable', function(e) {\n          if (e.data.size > 0) {\n            recordedChunks.push(e.data);\n          }\n        });\n    \n        window[recorder].addEventListener('stop', function() {\n          const blob = new Blob(recordedChunks)\n          saveBlob(blob, recorder, participantId)\n        });\n    \n      };\n    \n      navigator.mediaDevices.getUserMedia({ video: true })\n          .then((stream) => handleEvents(stream, 'cameraCapture'));\n\n      const { desktopCapturer } = window.require('electron')\n\n      desktopCapturer.getSources({ types: ['window'] }).then(async sources => {\n        for (const source of sources) {\n          if (source.name === taskName) {\n            navigator.mediaDevices.getUserMedia({\n              video: {\n                mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: source.id\n                }\n              }\n            }).then(stream => {\n              handleEvents(stream, 'screenCapture')\n            })\n            .catch(error => console.log(error))\n          } \n        }\n      })\n    \n    },\n    on_finish: () => {\n      if (config.USE_CAMERA) {\n        window.cameraCapture.start()\n        window.screenCapture.start()\n      }\n    }\n  }\n}\n\nexport default camera\n","var map = {\n\t\"./blue_payout_correct_10.png\": 61,\n\t\"./blue_payout_correct_100.png\": 62\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 60;","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_10.f515a81e.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_100.ae2416c7.png\";","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Login({ onLogin, envParticipantId, envStudyId, validationFunction }) {\n  // State variables for login screen\n  const [participantId, setParticipant] = useState(\"\");\n  const [studyId, setStudy] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // Update based on environment variables\n    setParticipant(envParticipantId);\n    setStudy(envStudyId);\n  }, [envParticipantId, envStudyId]);\n\n  // Checks if forms are filled in\n  function validateForm() {\n    return participantId.length > 0 && studyId.length > 0;\n  }\n\n  // Function to log in participant\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Validates fields\n    validationFunction(participantId, studyId)\n    // Logs in depending on result from promise\n    .then((loggedIn) => {\n      if (loggedIn) {\n        onLogin(loggedIn, studyId, participantId);\n      } else {\n        setError(true);\n      }\n    });\n  }\n\n  return (\n    <div className=\"centered-h-v\">\n      <div className=\"width-50\">\n        {error ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            The participant ID and study ID do not match\n          </div>\n        ) : null}\n        <Form className=\"centered-h-v\" onSubmit={handleSubmit}>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"participantId\">\n            <Form.Label>Participant ID</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"participantId\"\n              value={participantId}\n              onChange={(e) => setParticipant(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"studyId\">\n            <Form.Label>Study ID</Form.Label>\n            <Form.Control\n              type=\"studyId\"\n              value={studyId}\n              onChange={(e) => setStudy(e.target.value)}\n            />\n          </Form.Group>\n          <Button\n            style={{ width: \"100%\" }}\n            block\n            size=\"lg\"\n            type=\"submit\"\n            disabled={!validateForm()}\n          >\n            Log In\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import firebase from \"firebase\";\nimport 'firebase/firestore';\n\nrequire(\"dotenv\").config();\n\n// Set collection name\nconst collectionName = \"participant_responses\";\n\n// Firebase config\nlet config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId || \"no-firebase\",\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n};\n\n\n// Get a Firestore instance\nvar db = firebase.initializeApp(config).firestore();\n\n// Use emulator if on localhost\nif (window.location.hostname === \"localhost\") {\n  db.useEmulator(\"localhost\", 8080);\n}\n\n// Add participant data and trial data to db\nconst initParticipant = (participantId, studyId, startDate) => {\n  // return promise with value true if participant and study id match, false otherwise\n    return db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .set({ start_time: startDate, app_version: window.navigator.appVersion, app_platform: window.navigator.platform, results: []})\n    .then(()=>{\n      return true\n    })\n    .catch((error) => {\n      return false\n    });\n};\n\n// Add inidividual trials to db\nconst addToFirebase = (data) => {\n  console.log(data)\n  const participantId = data.participant_id;\n  const studyId = data.study_id;\n  const startDate = data.start_date\n  \n  db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .update('results', firebase.firestore.FieldValue.arrayUnion(data))\n};\n\n// Export types that exists in Firestore\nexport {\n  db,\n  collectionName,\n  initParticipant,\n  addToFirebase\n};\n\nexport default firebase;","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst experimentStart = () => {\n  let stimulus = baseStimulus(`<h1>${lang.task.name}</h1>`, true) + photodiodeGhostBox()\n\n  return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt.continue.button]\n  }\n}\n\nexport default experimentStart\n","import { eventCodes, lang, audioCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { beep } from '../lib/utils'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n      beep(audioCodes)\n    }\n  }\n}\n\nexport default startCode\n","import { lang, config } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst screenOne = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.instructions.welcome}</h1>\n    <p>${lang.instructions.p1}</p>\n    <p>${lang.instructions.p2}</p>\n    </div>\n    `, true)\n\nconst screenTwo = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.p3}</p>\n    <p>${lang.instructions.p4}</p>\n    </div>\n    `, true)\n\nconst screenThree = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.p5}</p>\n    <p>${lang.instructions.t100}</p>\n    <p>${lang.instructions.press_one}</p>\n    </div>\n    `, true)\n\nconst screenFour = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t020}</p>\n    <p>${lang.instructions.press_two}</p>\n    </div>\n    `, true)\n\nconst screenFive = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t003}</p>\n    <p>${lang.instructions.press_three}</p>\n    </div>\n    `, true)\n\nconst screenSix = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t212}</p>\n    <p>${lang.instructions.press_one}</p>\n    </div>\n    `, true)\n\nconst screenSeven = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t112}</p>\n    <p>${lang.instructions.press_two}</p>\n    </div>\n    `, true)\n\nconst screenEight = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t322}</p>\n    <p>${lang.instructions.press_three}</p>\n    </div>\n    `, true)\n\nconst screenNine =  baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t221}</p>\n    <p>${lang.instructions.press_one}</p>\n    </div>\n    `, true)\n\nconst screenTen =  baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t211}</p>\n    <p>${lang.instructions.press_two}</p>\n    </div>\n    `, true)\n\nconst screenEleven = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.if_see}</p>\n    <p>${lang.instructions.t232}</p>\n    <p>${lang.instructions.press_three}</p>\n    </div>\n    `, true)\n\nconst screenTwelve = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.p6}</p>\n    <p>${lang.instructions.p7}</p>\n    <p>${lang.instructions.p8}</p>\n    </div>\n    `, true)\n\nconst screenThirteen = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.p9}</p>\n    <p>${lang.instructions.p10}</p>\n    <p>${lang.instructions.p11}</p>\n    </div>\n    `, true)\n\nconst screenFourteen = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.p12}</p>\n    <p>${lang.instructions.p13}</p>\n    <p>${lang.instructions.p14}</p>\n    <p>${lang.instructions.p15}</p>\n    </div>\n    `, true)\n\nconst screenFifteen = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.practice_trials}</p>\n    </div>\n    `, true)\n\nconst instructions = () => {\n  let tl = [\n    screenOne,\n    screenTwo,\n    screenThree,\n    screenFour,\n    screenFive,\n    screenSix,\n    screenSeven,\n    screenEight,\n    screenNine,\n    screenTen,\n    screenEleven,\n    screenTwelve,\n    screenThirteen,\n    screenFourteen,\n    screenFifteen,\n  ]\n\n  if (config.USE_ELECTRON && !config.USE_EEG) tl.splice(13,1)\n\n  return {\n    type: 'instructions',\n    pages: tl,\n    show_clickable_nav: true\n\n  }\n}\n\nexport default instructions\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div>\n    <h2 id='usb-alert'></h2>\n    <br><h5>${lang.prompt.focus}</h5>\n  </div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt.continue.button]\n  }\n}\n\nexport default holdUpMarker\n","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst adjustVolume = () => {\n    const stimulus = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.instructions.adjust_volume}</h1>\n    </div>\n    `, true)\n    \n    return {\n        type: 'html_keyboard_response',\n        stimulus: stimulus,\n        prompt:  lang.prompt.continue.press,\n        response_ends_trial: true\n    }\n}\n\nexport default adjustVolume","import { lang } from '../config/main'\nimport { getBlockNumber } from '../lib/utils'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst numBlocks = () => {\n    return {\n      type: 'survey_text',\n      questions: [{ prompt: baseStimulus(`<h1>${lang.block_number.set}</h1>`, true), value: 8}],\n      on_finish: (data) => {\n        getBlockNumber(data)\n      }\n    }\n}\n\nexport default numBlocks","import experimentStart from \"../trials/experimentStart\";\nimport startCode from \"../trials/startCode\";\nimport instructions from \"../trials/instructions\";\nimport holdUpMarker from \"../trials/holdUpMarker\";\nimport { config } from \"../config/main\";\nimport adjustVolume from \"../trials/adjustVolume\";\nimport camera from \"../trials/camera\";\nimport numBlocks from '../trials/blockNumber'\n\nlet tl = [experimentStart()];\nif (config.USE_VOLUME) {\n  tl.push(adjustVolume());\n} \nif (config.USE_EEG) {\n  tl.push(numBlocks())\n  tl.push(holdUpMarker());\n  tl.push(startCode());\n}\ntl.push(instructions());\nif (config.USE_CAMERA) {\n  tl.push(camera());\n}\n\nconst preamble = {\n  type: \"html_keyboard_response\",\n  stimulus: \"\",\n  timeline: tl,\n};\n\nexport default preamble;\n","import { lang, config } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst experimentEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration,\n    on_load: () => {\n      if (config.USE_CAMERA) {\n        console.log('finished')\n        window.cameraCapture.stop()\n        window.screenCapture.stop()\n      }\n    }\n  }\n}\n\nexport default experimentEnd\n","import { eventCodes } from '../config/main'\nimport { pdSpotEncode, photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { fixationHTML } from '../lib/markup/fixation'\nimport { jsPsych } from 'jspsych-react'\nimport { removeCursor } from '../lib/utils'\n\nconst fixation = (trial) => {\n  let stimulus = fixationHTML + photodiodeGhostBox()\n\n  const code = eventCodes.fixation;\n\n  return {\n    type: 'html_keyboard_response',\n    choices: jsPsych.NO_KEYS,\n    stimulus: stimulus,\n    response_ends_trial: false,\n    trial_duration: trial.Duration*1000,\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(code)\n    },\n    on_finish: (data) => data.code = code\n  }\n}\n\nexport default fixation\n","export const fixationHTML = '<div class=\"beads_container\"><div id=\"fixation-dot\"> </div></div>'\n","const interferenceTrial = (stimulus, too_slow) => {\n  if (too_slow) {\n    return `<div class=\"beads_container\"><h1 class=\"too_slow\">${stimulus}</h1></div>`\n  }\n  else {\n    return `<div class=\"beads_container\"><h1 class=\"interference\">${stimulus}</h1></div>`\n  }\n}\n\nexport default interferenceTrial\n","import interferenceTrial  from '../lib/markup/trial'\nimport { pdSpotEncode, photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { eventCodes, lang } from '../config/main'\n\nconst interference = (trial) => {\n\n  const code = eventCodes.non_fixation;\n  var stimulus = interferenceTrial(trial.Stimuli, false) + photodiodeGhostBox()\n  return {\n    type: 'rt-categorize-html',\n    trial_duration: 1250,\n    on_load: () => pdSpotEncode(code),\n    key_answer: 48+trial.Correct,\n    show_stim_with_feedback: false,\n    feedback_duration: 2000,\n    timeout_message: interferenceTrial(lang.prompt.too_slow, true) + photodiodeGhostBox(),\n    stimulus: stimulus,\n    response_ends_trial: true,\n    on_finish: (data) => {\n      if (data.key_press !== null) {\n        data.correct = trial.Correct === data.key_press - 48;\n      }\n      else {\n        data.correct = false;\n      }\n      data.code = data.key_press - 48\n    }\n  }\n}\n\nexport default interference\n","import { lang, config } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\nconst accuracy = (training, num_trials, num_complete) => {\n   return {\n    type: 'html_keyboard_response',\n    stimulus: '',\n    data: {percent_correct: 0},\n    on_finish: (data) => {\n      if (config.USE_EEG){\n        const j_data = jsPsych.data.get().last(1).values()[0]\n        if (!training && num_complete>=j_data.num_blocks*96) {\n          jsPsych.endCurrentTimeline()\n      }\n      }\n    },\n    on_start: (trial) => {\n      const data = jsPsych.data.get().last(num_trials).values()\n      const num_correct = data.reduce((accumulator, item) => {\n        if (typeof item.correct === 'undefined') {\n          return accumulator\n        }\n        else {\n          if (item.correct) {\n            return accumulator + 1\n          }\n          else {\n            return accumulator\n          }\n        }\n      }, 0)\n      trial.data.percent_correct = 100*2*num_correct/data.length;\n      trial.stimulus = baseStimulus(`<h1>${Math.floor(trial.data.percent_correct).toString()+'%'}</h1>`, true) + photodiodeGhostBox();\n      if (training) {\n        if (trial.data.percent_correct < 80) {\n          trial.prompt = lang.prompt.continue.training_failed\n        }\n        else {\n          trial.prompt = lang.prompt.continue.training_success\n        }\n      } else {\n        const j_data = jsPsych.data.get().last(1).values()[0]\n        if (config.USE_EEG){\n          trial.prompt = lang.prompt.continue.block + (num_complete/96).toString() + lang.prompt.continue.of + j_data.num_blocks + lang.prompt.continue.next_block\n        }\n        else {\n          trial.prompt = lang.prompt.continue.block + (num_complete/96).toString() + lang.prompt.continue.of + '8' + lang.prompt.continue.next_block\n        }\n      }\n    },\n    prompt: 'temp'\n  }\n}\n\nexport default accuracy\n","import fixation from '../trials/fixation'\nimport interference from '../trials/interference'\nimport accuracy from '../trials/accuracy'\nimport trainingBlock from '../config/pcps_msit_eeg_train_sequence.json'\nimport mainBlock from '../config/pcps_msit_eeg_trial_sequence.json'\n\nconst taskBlock = (training) => {\n\tconst block = training ? trainingBlock : mainBlock;\n\tconst num_trials = training ? block.length : 96;\n\tlet timeline = block.flatMap( (trial) => {\n\t\tif (trial.Trial % 2 === 1) {\n\t\t\treturn fixation(trial)\n\t\t}\n\t\telse {\n\t\t\tif (trial.Trial % 96 === 0) {\n\t\t\t\treturn [interference(trial), accuracy(training, num_trials, trial.Trial)]\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn interference(trial)\n\t\t\t}\n\t\t}\n\t});\n\treturn {\n\t\ttype: 'html_keyboard_response',\n\t  stimulus: '',\n\t\ttimeline: timeline,\n\t\tloop_function: (data) => {\n\t\t\tif (training && data.values()[data.values().length-1].percent_correct < 80) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default taskBlock\n","import preamble from './preamble'\nimport experimentEnd from '../trials/experimentEnd'\nimport taskBlock from './taskBlock'\n\nimport { config } from '../config/main'\n\nconst primaryTimeline = [\n        preamble,\n        taskBlock(true),\n        taskBlock(false),\n        experimentEnd(3000)\n        ]\n\nconst mturkTimeline = [\n        preamble,\n        experimentEnd(3000)\n        ]\n\nexport const tl = (config.USE_MTURK) ? mturkTimeline : primaryTimeline\n","import { jsPsych } from \"jspsych-react\";\n\nexport function rt_categorize_html() {\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'categorize-html',\n    description: '',\n    parameters: {\n      stimulus: {\n        type: jsPsych.plugins.parameterType.HTML_STRING,\n        pretty_name: 'Stimulus',\n        default: undefined,\n        description: 'The HTML content to be displayed.'\n      },\n      key_answer: {\n        type: jsPsych.plugins.parameterType.KEYCODE,\n        pretty_name: 'Key answer',\n        default: undefined,\n        description: 'The key to indicate the correct response.'\n      },\n      choices: {\n        type: jsPsych.plugins.parameterType.KEYCODE,\n        pretty_name: 'Choices',\n        default: jsPsych.ALL_KEYS,\n        array: true,\n        description: 'The keys the subject is allowed to press to respond to the stimulus.'\n      },\n      text_answer: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Text answer',\n        default: null,\n        description: 'Label that is associated with the correct answer.'\n      },\n      correct_text: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Correct text',\n        default: \"<p class='feedback'>Correct</p>\",\n        description: 'String to show when correct answer is given.'\n      },\n      incorrect_text: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Incorrect text',\n        default: \"<p class='feedback'>Incorrect</p>\",\n        description: 'String to show when incorrect answer is given.'\n      },\n      prompt: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Prompt',\n        default: null,\n        description: 'Any content here will be displayed below the stimulus.'\n      },\n      force_correct_button_press: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        pretty_name: 'Force correct button press',\n        default: false,\n        description: 'If set to true, then the subject must press the correct response key after feedback in order to advance to next trial.'\n      },\n      show_stim_with_feedback: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        default: true,\n        no_function: false,\n        description: ''\n      },\n      show_feedback_on_timeout: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        pretty_name: 'Show feedback on timeout',\n        default: false,\n        description: 'If true, stimulus will be shown during feedback. If false, only the text feedback will be displayed during feedback.'\n      },\n      timeout_message: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Timeout message',\n        default: \"<p>Please respond faster.</p>\",\n        description: 'The message displayed on a timeout non-response.'\n      },\n      stimulus_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Stimulus duration',\n        default: null,\n        description: 'How long to hide stimulus.'\n      },\n      trial_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial duration',\n        default: null,\n        description: 'How long to show trial'\n      },\n      feedback_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Feedback duration',\n        default: 2000,\n        description: 'How long to show feedback.'\n      }\n    }\n  }\n\n  plugin.trial = function(display_element, trial) {\n\n    display_element.innerHTML = '<div id=\"jspsych-categorize-html-stimulus\" class=\"jspsych-categorize-html-stimulus\">'+trial.stimulus+'</div>';\n\n    // hide image after time if the timing parameter is set\n    if (trial.stimulus_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        display_element.querySelector('#jspsych-categorize-html-stimulus').style.visibility = 'hidden';\n      }, trial.stimulus_duration);\n    }\n\n    // if prompt is set, show prompt\n    if (trial.prompt !== null) {\n      display_element.innerHTML += trial.prompt;\n    }\n\n    var trial_data = {};\n\n    // create response function\n    var after_response = function(info) {\n\n      // kill any remaining setTimeout handlers\n      jsPsych.pluginAPI.clearAllTimeouts();\n\n      // clear keyboard listener\n      jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      var correct = false;\n      if (trial.key_answer === info.key) {\n        correct = true;\n      }\n\n      // save data\n      trial_data = {\n        \"rt\": info.rt,\n        \"correct\": correct,\n        \"stimulus\": trial.stimulus,\n        \"key_press\": info.key\n      };\n\n      display_element.innerHTML = '';\n\n      var timeout = info.rt == null;\n      if (timeout) {\n        doFeedback(correct, timeout);\n      }\n      else {\n        endTrial()\n      }\n    }\n\n    jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: 'performance',\n      persist: false,\n      allow_held_key: false\n    });\n\n    if (trial.trial_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        after_response({\n          key: null,\n          rt: null\n        });\n      }, trial.trial_duration);\n    }\n\n    function doFeedback(correct, timeout) {\n\n      if (timeout && !trial.show_feedback_on_timeout) {\n        display_element.innerHTML += trial.timeout_message;\n      } else {\n        // show image during feedback if flag is set\n        if (trial.show_stim_with_feedback) {\n          display_element.innerHTML = '<div id=\"jspsych-categorize-html-stimulus\" class=\"jspsych-categorize-html-stimulus\">'+trial.stimulus+'</div>';\n        }\n\n        // substitute answer in feedback string.\n        var atext = \"\";\n        if (correct) {\n          atext = trial.correct_text.replace(\"%ANS%\", trial.text_answer);\n        } else {\n          atext = trial.incorrect_text.replace(\"%ANS%\", trial.text_answer);\n        }\n\n        // show the feedback\n        display_element.innerHTML += atext;\n      }\n      // check if force correct button press is set\n      if (trial.force_correct_button_press && correct === false && ((timeout && trial.show_feedback_on_timeout) || !timeout)) {\n\n        var after_forced_response = function(info) {\n          endTrial();\n        }\n\n        jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_forced_response,\n          valid_responses: [trial.key_answer],\n          rt_method: 'performance',\n          persist: false,\n          allow_held_key: false\n        });\n\n      } else {\n        jsPsych.pluginAPI.setTimeout(function() {\n          endTrial();\n        }, trial.feedback_duration);\n      }\n\n    }\n\n    function endTrial() {\n      display_element.innerHTML = '';\n      jsPsych.finishTrial(trial_data);\n    }\n\n  };\n\n  return plugin;\n}\n","import React from \"react\";\nimport { Experiment, jsPsych } from \"jspsych-react\";\nimport { tl } from \"../timelines/main\";\nimport { rt_categorize_html } from \"../lib/rt-categorize-html\";\n\nfunction JsPsychExperiment({ dataUpdateFunction, dataFinishFunction }) {\n  jsPsych.plugins[\"rt-categorize-html\"] = rt_categorize_html();\n\n  return (\n    <div className=\"App\">\n      <Experiment\n        settings={{\n          timeline: tl,\n          on_data_update: (data) => dataUpdateFunction(data),\n          on_finish: (data) => dataFinishFunction(data),\n        }}\n      />\n    </div>\n  );\n}\nexport default JsPsychExperiment;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport Login from \"./components/Login\";\nimport { jsPsych } from \"jspsych-react\";\nimport { getTurkUniqueId, getProlificId, sleep } from \"./lib/utils\";\nimport { initParticipant, addToFirebase } from \"./firebase\";\nimport JsPsychExperiment from \"./components/JsPsychExperiment\";\nimport { config } from \"./config/main\";\nimport { version } from \"../package.json\"\n\nfunction App() {\n  // Variables for time\n  const startDate = new Date().toISOString();\n  // Variables for login\n  const [loggedIn, setLogin] = useState(false);\n  const [ipcRenderer, setRenderer] = useState(false);\n  const [psiturk, setPsiturk] = useState(false);\n  const [envParticipantId, setEnvParticipantId] = useState(\"\");\n  const [envStudyId, setEnvStudyId] = useState(\"\");\n  const [currentMethod, setMethod] = useState(\"default\");\n  const [reject, setReject] = useState(false);\n\n  const query = new URLSearchParams(window.location.search);\n\n  // Validation functions for desktop case and firebase\n  const defaultValidation = async () => {\n    return true;\n  };\n  const firebaseValidation = (participantId, studyId) => {\n    return initParticipant(participantId, studyId, startDate);\n  };\n\n  // Adding data functions for firebase, electron adn Mturk\n  const defaultFunction = (data) => {};\n  const firebaseUpdateFunction = (data) => {\n    addToFirebase(data);\n  };\n  const desktopUpdateFunction = (data) => {\n    ipcRenderer.send(\"data\", data);\n  };\n  const psiturkUpdateFunction = (data) => {\n    psiturk.recordTrialData(data);\n  };\n\n  // On finish functions for electron, Mturk\n  const desktopFinishFunction = () => {\n    ipcRenderer.send(\"end\", \"true\");\n  };\n  const psiturkFinishFunction = () => {\n    const completePsiturk = async () => {\n      psiturk.saveData();\n      await sleep(5000);\n      psiturk.completeHIT();\n    };\n    completePsiturk();\n  };\n\n  // Function to add jspsych data on login\n  const setLoggedIn = useCallback(\n    (loggedIn, studyId, participantId) => {\n      if (loggedIn) {\n        jsPsych.data.addProperties({\n          participant_id: participantId,\n          study_id: studyId,\n          start_date: startDate,\n          task_version: version\n        });\n      }\n      setLogin(loggedIn);\n    },\n    [startDate]\n  );\n\n  // Login logic\n  useEffect(() => {\n    // For testing and debugging purposes\n    console.log(\"Turk:\", config.USE_MTURK);\n    console.log(\"Firebase:\", config.USE_FIREBASE);\n    console.log(\"Prolific:\", config.USE_PROLIFIC);\n    console.log(\"Electron:\", config.USE_ELECTRON);\n    console.log(\"Video:\", config.USE_CAMERA);\n    console.log(\"Volume:\", config.USE_VOLUME);\n    console.log(\"Event Marker:\", config.USE_EEG);\n    console.log(\"Photodiode:\", config.USE_PHOTODIODE);\n    // If on desktop\n    if (config.USE_ELECTRON) {\n      const { ipcRenderer } = window.require(\"electron\");\n      setRenderer(ipcRenderer);\n      ipcRenderer.send('updateEnvironmentVariables', config)\n      // If at home, fill in fields based on environment variables\n      const credentials = ipcRenderer.sendSync(\"syncCredentials\");\n      if (credentials.envParticipantId) {\n        setEnvParticipantId(credentials.envParticipantId);\n      }\n      if (credentials.envStudyId) {\n        setEnvStudyId(credentials.envStudyId);\n      }\n      setMethod(\"desktop\");\n    }\n    // If online\n    else {\n      // If MTURK\n      if (config.USE_MTURK) {\n        /* eslint-disable */\n        window.lodash = _.noConflict();\n        const turkId = getTurkUniqueId();\n        setPsiturk(new PsiTurk(turkId, \"/complete\"));\n        setMethod(\"mturk\");\n        setLoggedIn(true, \"mturk\", turkId);\n        /* eslint-enable */\n      }\n\n      // If prolific\n      else if (config.USE_PROLIFIC) {\n        const pID = getProlificId();\n        if (config.USE_FIREBASE && pID) {\n          setMethod(\"firebase\");\n          setLoggedIn(true, \"prolific\", pID);\n        } else {\n          setReject(true);\n        }\n      }\n\n      // If firebase\n      else if (config.USE_FIREBASE) {\n        setMethod(\"firebase\");\n        // Autologin with query parameters\n        const participantId = query.get(\"participantID\");\n        const studyId = query.get(\"studyID\");\n        if (participantId) {\n          setEnvParticipantId(participantId)\n        }\n        if (studyId) {\n          setEnvStudyId(studyId)\n        }\n      } else {\n        setReject(true);\n      }\n    }\n  // eslint-disable-next-line \n}, []);\n\n  if (reject) {\n    return (\n      <div className=\"centered-h-v\">\n        <div className=\"width-50 alert alert-danger\">\n          Please ask your task provider to enable firebase.\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <>\n        {loggedIn ? (\n          <JsPsychExperiment\n            dataUpdateFunction={\n              {\n                desktop: desktopUpdateFunction,\n                firebase: firebaseUpdateFunction,\n                mturk: psiturkUpdateFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n            dataFinishFunction={\n              {\n                desktop: desktopFinishFunction,\n                mturk: psiturkFinishFunction,\n                firebase: defaultFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n          />\n        ) : (\n          <Login\n            validationFunction={\n              {\n                desktop: defaultValidation,\n                default: defaultValidation,\n                firebase: firebaseValidation,\n              }[currentMethod]\n            }\n            envParticipantId={envParticipantId}\n            envStudyId={envStudyId}\n            onLogin={setLoggedIn}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n","const baseStimulus = (element, prompt=false) => {\n  const class_ = (prompt) ? 'main-prompt': 'main'\n  return `<div class=${class_}>${element}</div>`\n}\n\nexport {\n  baseStimulus\n}\n"],"sourceRoot":""}